{"ast":null,"code":"var _jsxFileName = \"/Users/ahmadomar/stocks/frontend/src/components/stockGraph.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StockGraph = () => {\n  _s();\n  const [stock, setStock] = useState('AAPL'); // Default stock\n  const [startDate, setStartDate] = useState('2000-01-01'); // Default start date\n  const [endDate, setEndDate] = useState(new Date().toISOString().split('T')[0]); // Default to today\n  const [purchaseAmount, setPurchaseAmount] = useState(1000); // Default purchase amount\n  const [stockData, setStockData] = useState([]);\n  const [profit, setProfit] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [formattedStockData, setFormattedStockData] = useState('');\n  const svgRef = useRef(); // Ref for the SVG element\n\n  useEffect(() => {\n    setFormattedStockData(JSON.stringify(stockData, null, 2)); // 2 spaces for pretty printing\n  }, [stockData]);\n  const fetchStockData = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      var url = `http://localhost:5000/api/stocks?stock=${stock}&start=${startDate}&end=${endDate}`;\n      console.log('url', url);\n      const response = await fetch(url);\n      if (!response.ok) throw new Error('Network response was not ok');\n      const result = await response.json();\n      // Assuming result has the necessary data for the graph\n      // Process the result to extract data points\n      const chartData = result.chart.result[0].indicators.quote[0];\n      const dates = result.chart.result[0].timestamp.map(timestamp => new Date(timestamp * 1000));\n      const prices = chartData.close;\n\n      // Combine dates and prices\n      const formattedData = dates.map((date, index) => ({\n        date,\n        price: prices[index]\n      })).filter(d => d.price != null);\n      setStockData(formattedData);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const drawGraph = () => {\n    // Set dimensions and margins for the graph\n    const margin = {\n      top: 20,\n      right: 30,\n      bottom: 40,\n      left: 40\n    };\n    const width = 800 - margin.left - margin.right;\n    const height = 400 - margin.top - margin.bottom;\n\n    // Clear any previous SVG\n    d3.select(svgRef.current).selectAll('*').remove();\n\n    // Create an SVG element\n    const svg = d3.select(svgRef.current).attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', `translate(${margin.left},${margin.top})`);\n\n    // Set the scales\n    const x = d3.scaleTime().domain(d3.extent(stockData, d => d.date)).range([0, width]);\n    const y = d3.scaleLinear().domain([0, d3.max(stockData, d => d.price)]).range([height, 0]);\n\n    // Add the axes\n    svg.append('g').attr('class', 'x-axis').attr('transform', `translate(0,${height})`).call(d3.axisBottom(x).tickFormat(d3.timeFormat(\"%Y-%m-%d\")));\n    svg.append('g').attr('class', 'y-axis').call(d3.axisLeft(y));\n\n    // Draw the line\n    const line = d3.line().x(d => x(d.date)).y(d => y(d.price));\n    svg.append('path').datum(stockData).attr('fill', 'none').attr('stroke', 'steelblue').attr('stroke-width', 1.5).attr('d', line);\n  };\n\n  // Function to calculate profit\n  const calculateProfit = () => {\n    if (stockData.length === 0) return;\n\n    // Assuming stockData[0].price is the initial price and stockData[stockData.length - 1].price is the final price\n    const initialPrice = stockData[0].price;\n    const finalPrice = stockData[stockData.length - 1].price;\n\n    // // Calculate the profit/loss\n    // const sharesBought = investmentAmount / initialPrice;\n    // const finalValue = sharesBought * finalPrice;\n    // const profitAmount = finalValue - investmentAmount;\n    const profitAmount = finalPrice - initialPrice;\n    setProfit(profitAmount);\n  };\n  useEffect(() => {\n    if (stockData.length) {\n      drawGraph(); // Call the function to draw the graph\n    }\n  }, [stockData]);\n  useEffect(() => {\n    fetchStockData();\n  }, [stock, startDate, endDate]);\n  useEffect(() => {\n    calculateProfit();\n  }, [stockData]);\n  const handleSubmit = e => {\n    e.preventDefault();\n    // fetchStockData(); // Fetch data on form submission\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Stock Investment Graph\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Stock:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Start:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"End:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              colSpan: \"100%\",\n              children: \"Purchase Amount:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  placeholder: \"Stock Symbol\",\n                  value: stock,\n                  onChange: e => setStock(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 151,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"date\",\n                  value: startDate,\n                  onChange: e => setStartDate(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 161,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"date\",\n                  value: endDate,\n                  onChange: e => setEndDate(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 170,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  value: purchaseAmount,\n                  onChange: e => setPurchaseAmount(e.target.value),\n                  placeholder: \"Purchase Amount in USD\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 179,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"submit\",\n                children: \"Fetch Data\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: formattedStockData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 25\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 9\n  }, this);\n};\n_s(StockGraph, \"r6vWdzAOrj91LK8LLLpVuAmif2M=\");\n_c = StockGraph;\nexport default StockGraph;\nvar _c;\n$RefreshReg$(_c, \"StockGraph\");","map":{"version":3,"names":["React","useState","useEffect","useRef","d3","jsxDEV","_jsxDEV","StockGraph","_s","stock","setStock","startDate","setStartDate","endDate","setEndDate","Date","toISOString","split","purchaseAmount","setPurchaseAmount","stockData","setStockData","profit","setProfit","loading","setLoading","error","setError","formattedStockData","setFormattedStockData","svgRef","JSON","stringify","fetchStockData","url","console","log","response","fetch","ok","Error","result","json","chartData","chart","indicators","quote","dates","timestamp","map","prices","close","formattedData","date","index","price","filter","d","err","message","drawGraph","margin","top","right","bottom","left","width","height","select","current","selectAll","remove","svg","attr","append","x","scaleTime","domain","extent","range","y","scaleLinear","max","call","axisBottom","tickFormat","timeFormat","axisLeft","line","datum","calculateProfit","length","initialPrice","finalPrice","profitAmount","handleSubmit","e","preventDefault","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","colSpan","type","placeholder","value","onChange","target","ref","_c","$RefreshReg$"],"sources":["/Users/ahmadomar/stocks/frontend/src/components/stockGraph.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\n\nconst StockGraph = () => {\n    const [stock, setStock] = useState('AAPL'); // Default stock\n    const [startDate, setStartDate] = useState('2000-01-01'); // Default start date\n    const [endDate, setEndDate] = useState(new Date().toISOString().split('T')[0]); // Default to today\n    const [purchaseAmount, setPurchaseAmount] = useState(1000); // Default purchase amount\n    const [stockData, setStockData] = useState([]);\n    const [profit, setProfit] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n\n    const [formattedStockData, setFormattedStockData] = useState('');\n\n    const svgRef = useRef(); // Ref for the SVG element\n\n    useEffect(()=>{\n        setFormattedStockData(JSON.stringify(stockData, null, 2)); // 2 spaces for pretty printing\n    }\n    ,[stockData])\n\n    const fetchStockData = async () => {\n        setLoading(true);\n        setError(null);\n        try {\n            var url = `http://localhost:5000/api/stocks?stock=${stock}&start=${startDate}&end=${endDate}`;\n            console.log('url',url)\n            const response = await fetch(url);\n            if (!response.ok) throw new Error('Network response was not ok');\n            const result = await response.json();\n            // Assuming result has the necessary data for the graph\n            // Process the result to extract data points\n            const chartData = result.chart.result[0].indicators.quote[0];\n            const dates = result.chart.result[0].timestamp.map((timestamp) => new Date(timestamp * 1000));\n            const prices = chartData.close;\n\n            // Combine dates and prices\n            const formattedData = dates.map((date, index) => ({ date, price: prices[index] })).filter(d => d.price != null);\n            setStockData(formattedData);\n        } catch (err) {\n            setError(err.message);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const drawGraph = () => {\n        // Set dimensions and margins for the graph\n        const margin = { top: 20, right: 30, bottom: 40, left: 40 };\n        const width = 800 - margin.left - margin.right;\n        const height = 400 - margin.top - margin.bottom;\n\n        // Clear any previous SVG\n        d3.select(svgRef.current).selectAll('*').remove();\n\n        // Create an SVG element\n        const svg = d3.select(svgRef.current)\n            .attr('width', width + margin.left + margin.right)\n            .attr('height', height + margin.top + margin.bottom)\n            .append('g')\n            .attr('transform', `translate(${margin.left},${margin.top})`);\n\n        // Set the scales\n        const x = d3.scaleTime()\n            .domain(d3.extent(stockData, d => d.date))\n            .range([0, width]);\n\n        const y = d3.scaleLinear()\n            .domain([0, d3.max(stockData, d => d.price)])\n            .range([height, 0]);\n\n        // Add the axes\n        svg.append('g')\n            .attr('class', 'x-axis')\n            .attr('transform', `translate(0,${height})`)\n            .call(d3.axisBottom(x).tickFormat(d3.timeFormat(\"%Y-%m-%d\")));\n\n        svg.append('g')\n            .attr('class', 'y-axis')\n            .call(d3.axisLeft(y));\n\n        // Draw the line\n        const line = d3.line()\n            .x(d => x(d.date))\n            .y(d => y(d.price));\n\n        svg.append('path')\n            .datum(stockData)\n            .attr('fill', 'none')\n            .attr('stroke', 'steelblue')\n            .attr('stroke-width', 1.5)\n            .attr('d', line);\n    };\n\n    // Function to calculate profit\n    const calculateProfit = () => {\n        if (stockData.length === 0) return;\n\n        // Assuming stockData[0].price is the initial price and stockData[stockData.length - 1].price is the final price\n        const initialPrice = stockData[0].price;\n        const finalPrice = stockData[stockData.length - 1].price;\n\n        // // Calculate the profit/loss\n        // const sharesBought = investmentAmount / initialPrice;\n        // const finalValue = sharesBought * finalPrice;\n        // const profitAmount = finalValue - investmentAmount;\n        const profitAmount = finalPrice - initialPrice;\n\n        setProfit(profitAmount);\n    };\n\n    useEffect(() => {\n        if (stockData.length) {\n            drawGraph(); // Call the function to draw the graph\n        }\n    }, [stockData]);\n\n    useEffect(() => {\n        fetchStockData();\n    }, [stock, startDate, endDate]);\n    \n    useEffect(() => {\n        calculateProfit();\n    }, [stockData]);\n\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        // fetchStockData(); // Fetch data on form submission\n    };\n\n    return (\n        <div>\n            <h1>Stock Investment Graph</h1>\n            <form onSubmit={handleSubmit}>\n                <table>\n                    <thead>\n                        <tr>\n                            <th>Stock:</th>\n                            <th>Start:</th>\n                            <th>End:</th>\n                            <th colSpan='100%'>Purchase Amount:</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>\n                                <label>\n                                    <input\n                                        type=\"text\"\n                                        placeholder=\"Stock Symbol\"\n                                        value={stock}\n                                        onChange={(e) => setStock(e.target.value)}\n                                    />\n                                </label>\n                            </td>\n                            <td>\n                                <label>\n                                    <input\n                                        type=\"date\"\n                                        value={startDate}\n                                        onChange={(e) => setStartDate(e.target.value)}\n                                    />\n                                </label>\n                            </td>\n                            <td>\n                                <label>\n                                    <input\n                                        type=\"date\"\n                                        value={endDate}\n                                        onChange={(e) => setEndDate(e.target.value)}\n                                    />\n                                </label>\n                            </td>\n                            <td>\n                                <label>\n                                    <input\n                                        type=\"number\"\n                                        value={purchaseAmount}\n                                        onChange={(e) => setPurchaseAmount(e.target.value)}\n                                        placeholder=\"Purchase Amount in USD\"\n                                    />\n                                </label>\n                            </td>\n                            <td>\n                                <button type=\"submit\">Fetch Data</button>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </form>\n            <pre>{formattedStockData}</pre>\n            {loading && <p>Loading...</p>}\n            {error && <p>Error: {error}</p>}\n            <svg ref={svgRef}></svg> {/* SVG for D3 to draw on */}\n        </div>\n    );\n};\n\nexport default StockGraph;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}